use lalrpop_util::ErrorRecovery;

use crate::ast::Spec;
use z3::*;

grammar<'err, 'spec>(
                errors: &'err mut Vec<ErrorRecovery<usize,
                                Token<'input>, 
                                &'static str>>,
                specification: &'spec  Box<Spec>
             );


pub Spec: Box<Spec> = {
    <n:Num> => {
        //specification.ast = n;
        //specification
        println!("z3 int: {}",n);
        let spec = Box::new(Spec::new());
        spec
    }
};

//    Data
//    Members
//    Body
//"end" Name  => ""

Data: &'input str = {
    <Scheme+> => ""
}

Body: &'input str = {
    <Action+> => ""
}

Scheme: &'input str = {
    Name "is" "in" Set Where_Clause* => "",
    Name "are" Set Where_Clause* => ""
}
Where_Clause: &'input str = {
    "where" ":" Expr "."  => ""
}

Set: &'input str = {
    "{" Expr ("," Expr )* "}" => ""
}

Members: &'input str = {
    "members" "are" "{" Word ( "," Word )* "}"  => ""
}


Action: &'input str = {
    "action" (Name)? "is"
        When_Block ("or" When_Block)*
        Then_Block ("or" Then_Block)*
    "end" "action"  => ""
}

When_Block: &'input str = {
    "when" Quantifiers? ":"
        Stmt* => ""
}
Then_Block: &'input str = {
    "then" ":"
        Stmt+ => ""
}

Quantifiers: &'input str = {
    "any" => "",
    "all" => "",
    "at" "most" Num => "",
    "at" "least" Num => "",
    "always" => "",
}

Stmt: &'input str = {
    If_Stmt => "",
    Selection_Stmt "." => "",
    Assignment "." => ""
}

Selection_Stmt: &'input str = {
    "for"  Name "in" Expr Filter? => "",
    "for" "some" Name "in" Expr Filter? => "",
    "for" "all" Name "in" Expr Filter? => ""
}
Filter: &'input str = {
    "such" "that" Expr => ""
}

If_Stmt: &'input str = {

    "if" Expr "then" ":"
        Stmt+

    Else_If*

    Else?

    "end" "if" => ""

}

Else_If: &'input str = {
    "elsif" Expr "then" ":"
        Stmt+ => ""
}

Else: &'input str = {
    "else" ":"
        Stmt+  => ""
}

Assignment: &'input str = {
    Name "'" ":=" Expr => ""
}
//todo, let := will-be

Expr: &'input str = {

    #[precedence(level="0")]
    Membership => "",

    // Conditional Exprssions:
    #[precedence(level="2")] #[assoc(side="left")]
    Expr "and" Membership => "",
    Expr "or" Membership => "",
    Expr "or-rather" Membership => "",

    #[precedence(level="3")] #[assoc(side="left")]
    "not" Expr => "",

}

Membership: &'input str = {

    #[precedence(level="0")]
    Arithmatic => "",

    #[precedence(level="1")] #[assoc(side="left")]
    Membership "equals" Arithmatic => "",
    Membership "not-equals" Arithmatic => "",
    Membership "is-greater-than" ("or-equals")? Arithmatic => "",
    Membership "is-less-than" ("or-equals")? Arithmatic => "",
    "is" "equals" Arithmatic => "",
    "is" "not-equals" Arithmatic => "",
    "is" "is-greater-than" ("or-equals")? Arithmatic => "",
    "is" "is-less-than" ("or-equals")? Arithmatic => "",

    #[precedence(level="2")] #[assoc(side="left")]
    Membership "is"? "between" Arithmatic ".." Arithmatic => "",
    Membership "is"? "in" Arithmatic => "",
    "is" "between" Arithmatic ".." Arithmatic => "",
    "is" "in" Arithmatic => ""

}

Arithmatic: &'input str = {

    #[precedence(level="0")]
    Term => "",

    #[precedence(level="1")] #[assoc(side="left")]
    Arithmatic "*" Term => "",
    Arithmatic "/" Term => "",

    #[precedence(level="2")] #[assoc(side="left")]
    Arithmatic "+" Term => "",
    Arithmatic "-" Term => "",

    #[precedence(level="3")] #[assoc(side="left")]
    "-" Arithmatic => "",
}

Term: &'input str = {
    Name => <>,
    Num => "",
    "(" Expr ")" => "",
    "members" => "",
    Set => ""
    //function call here
}


Name: &'input str = {
    Word ("->" Word )* => ""
}

Word: &'input str = {
    <r"[a-zA-Z_][a-zA-Z0-9_]*"> => <>
}

Num: z3::ast::Int<'spec>= {
    <r"[0-9]+"> => {
        z3::ast::Int::from_str(&specification.ctx, <> ).unwrap()
    }
}




//TODO: must phrases as invariants
//TODO: eventually & always  
//TODO: union & list ops

//import z3 ast directly to build
